#!/usr/bin/bash

#curl -sL http://downloads.openshift-console.svc.cluster.local/amd64/linux/oc.tar | tar xf -
#curl -sL http://hyperconverged-cluster-cli-download.openshift-cnv.svc.cluster.local:8080/amd64/linux/virtctl.tar.gz | tar xfz -
export PATH=$PATH:$PWD

c() { echo "# $@" ; }
n() { echo "" ; }
x() { echo "\$ $@" ; eval "$@" ; }
red() { echo -e "\e[0;31m$@\e[0m" ; }
green() { echo -e "\e[0;32m$@\e[0m" ; }
die() { red "FATAL: $@" ; exit 1 ; }
assert() { echo "(assert:) \$ $@" ; eval $@ || { echo "(assert?) FALSE" ; die "Assertion ret 0 failed: '$@'" ; } ; green "(assert?) True" ; }

export WD=${WD:-$PWD}
export BUILT_PLUGINS_INDEX="generated-plugin-index.txt"
export RESULTSD=${WD:-$PWD}/results.d/

main() {
  c "Starting validation ..."
  [[ -f "${RESULTSD}/result.json" ]] || run_checks $@

  c "Summarizing results from '$RESULTSD'"
  cat ${RESULTSD}/*/result.json \
  | jq -s . \
  | jq '{apiVersion: "validate.virtualization.openshift.com/v1alpha1", kind: "Results", items: .}' \
  | tee ${RESULTSD}/result.json \
  | pprint

}

run_checks() {
  local PLUGIN_FILTER="${1:-.*}"
  local PLUGINS=$(grep -E "$PLUGIN_FILTER" $BUILT_PLUGINS_INDEX | sort)

  set -m  # job control
  echo -e "$PLUGINS" | xargs -n 1 -P 10 -- $0 run_check 

  c "Waiting for jobs to complete" 
  wait -f
  c "All jobs completed."
}

run_check() {
  c "Dispatching '$PLUGIN' ..."

  set -x

  local PLUGIN="$1"
  local PLUGIN_RESULTS="$RESULTSD/$(echo $PLUGIN | tr "/:.-" "____").d/"

  mkdir -p $PLUGIN_RESULTS

  (
  podman -r run \
      --rm \
      --env WD=/ \
      --env RESULTSD=/results.d/ \
      --volume $PLUGIN_RESULTS:/results.d:rw,z \
      --volume $HOME/.kube:/.kube:ro,z \
      --volume $(which oc):/usr/bin/oc:ro,bind,exec,z \
      --volume $(which virtctl):/usr/bin/virtctl:ro,bind,exec,z \
      $PLUGIN
  ) > $PLUGIN_RESULTS/cmdline 2>&1
}

pprint() {
    jq -r '
.items[]
| [
   if .step and .step.pass
   then "    \(.step.level) - \(.plugin.name)   + \(.check.displayname)@\(.step.name) - \(.step.message)"
   elif .check and .check.pass
   then "[x] PASS - \(.plugin.name) ### \(.check.displayname)"
   elif .check and .step
   then
     "    \(.step.level) - \(.plugin.name) --- \(.check.displayname)@\(.step.name) - \(.step.message)\n"
     + "[ ] FAIL - \(.plugin.name) ### \(.check.displayname)"
   end
] | join(" ")
'
}

if [[ "$1" == "run_check" ]];
then $@
else main $@
fi
