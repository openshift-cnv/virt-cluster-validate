#!/usr/bin/bash

#curl -sL http://downloads.openshift-console.svc.cluster.local/amd64/linux/oc.tar | tar xf -
#curl -sL http://hyperconverged-cluster-cli-download.openshift-cnv.svc.cluster.local:8080/amd64/linux/virtctl.tar.gz | tar xfz -
export PATH=$PATH:$PWD

c() { echo "# $@" ; }
n() { echo "" ; }
x() { echo "\$ $@" ; eval "$@" ; }

export WD=${WD:-$PWD}
export RESULTSD=${WD:-$PWD}/results.d/

export IMAGEURL=quay.io/openshift-virtualization/virt-cluster-validate

main() {
  c "$0 ($(git rev-parse --short HEAD))"
  c "$(date)"
  _gather_data
  c "$(date)"
}

_gather_data() {
  run_plugins $@
}

run_plugins() {
  c "Building container image"
  podman -r build --quiet -t quay.io/openshift-virtualization/virt-cluster-validate .

  c "Starting validation ..."
  eval podman -r run --rm $(podman -r run $IMAGEURL podman-args)
}

_display_data_json() {
  c "Summarizing results from '$RESULTSD'"
  cat ${RESULTSD}/*/result.json \
  | jq -s . \
  | jq '{apiVersion: "validate.virtualization.openshift.com/v1alpha1", kind: "Results", items: .}' \
  | tee ${RESULTSD}/result.json \
  | pprint
}

pprint() {
    jq -r '
.items[]
| [
   if .step and .step.pass
   then "    \(.step.level) - \(.plugin.name)   + \(.check.displayname)@\(.step.name) - \(.step.message)"

   elif .check and .check.pass
   then "[x] PASS - \(.plugin.name) ### \(.check.displayname)"

   elif .check and .step

   then
     "    \(.step.level) - \(.plugin.name) --- \(.check.displayname)@\(.step.name) - \(.step.message)\n"
     + "[ ] FAIL - \(.plugin.name) ### \(.check.displayname)"
   end
] | join(" ")
'
}

if [[ "$1" == "run_check" ]];
then $@
else main $@
fi
