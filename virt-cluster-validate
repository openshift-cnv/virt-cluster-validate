#!/usr/bin/bash

#curl -sL http://downloads.openshift-console.svc.cluster.local/amd64/linux/oc.tar | tar xf -
#curl -sL http://hyperconverged-cluster-cli-download.openshift-cnv.svc.cluster.local:8080/amd64/linux/virtctl.tar.gz | tar xfz -
export PATH=$PATH:$PWD

c() { echo "# $@" ; }
n() { echo "" ; }
x() { echo "\$ $@" ; eval "$@" ; }
colorfy() { sed "s/${1:-err\|fail}/\x1b[1;31m&\x1b[0m/I ; s/${2:-pass}/\x1b[1;32m&\x1b[0m/I ; s/${2:-info\|warn}/\x1b[34m&\x1b[0m/I" ; }

export WD=${WD:-$PWD}
export RESULTSD=${WD:-$PWD}/results.d/

main() {
  c "$0 ($(git rev-parse --short HEAD))"
  c "$(date)"
  _gather_data
  _display_data
  c "$(date)"
}

_gather_data() {
  run_plugins $@
}

run_plugins() {
  local PLUGIN_FILTER="${1:-.*}"

  c "Building container image"

  podman -r build --quiet -t quay.io/openshift-virtualization/virt-cluster-validate .

  c "Starting validation ..."

  podman -r run \
      --rm \
      --env WD=/ \
      --env HOME=/ \
      --env RESULTSD=/results.d/ \
      --env NUM_CONCURRENT_TESTS=42 \
      --env TEST_FITER="$PLUGIN_FILTER" \
      --volume $PWD:/app:ro,z \
      --volume $RESULTSD:/results.d:rw,z \
      --volume $HOME/.kube:/.kube:ro,z \
      --volume $(which oc):/usr/bin/oc:ro,bind,exec,z \
      --volume $(which virtctl):/usr/bin/virtctl:ro,bind,exec,z \
      quay.io/openshift-virtualization/virt-cluster-validate \
      bash -e -c 'export PATH=$PATH:/app/bin ; testrunner "$TEST_FILTER"'
}

_display_data() {
  cd $RESULTSD
  find *.d/*.d/ -type d | sort -h | while read TESTDIR; do
    TESTDIR=$(realpath -s --relative-to="$RESULTSD" "$TESTDIR")
    echo $(readlink $TESTDIR/result) $TESTDIR
    HAD_DETAILS=false
    for C in FAIL INFO WARN; do [[ -f $TESTDIR/$C ]] && { sed "s/^/     /" $TESTDIR/$C ; HAD_DETAILS=true ; } ; done
    $HAD_DETAILS && echo "     See '$TESTDIR/log.txt' for more details"
  done | colorfy
}

_display_data_json() {
  c "Summarizing results from '$RESULTSD'"
  cat ${RESULTSD}/*/result.json \
  | jq -s . \
  | jq '{apiVersion: "validate.virtualization.openshift.com/v1alpha1", kind: "Results", items: .}' \
  | tee ${RESULTSD}/result.json \
  | pprint
}

pprint() {
    jq -r '
.items[]
| [
   if .step and .step.pass
   then "    \(.step.level) - \(.plugin.name)   + \(.check.displayname)@\(.step.name) - \(.step.message)"

   elif .check and .check.pass
   then "[x] PASS - \(.plugin.name) ### \(.check.displayname)"

   elif .check and .step

   then
     "    \(.step.level) - \(.plugin.name) --- \(.check.displayname)@\(.step.name) - \(.step.message)\n"
     + "[ ] FAIL - \(.plugin.name) ### \(.check.displayname)"
   end
] | join(" ")
'
}

if [[ "$1" == "run_check" ]];
then $@
else main $@
fi
